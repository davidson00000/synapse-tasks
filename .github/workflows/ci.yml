name: iOS UI Capture

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  ui-shot:
    name: UI Shot (${{ matrix.combo.tab }}_${{ matrix.combo.weekday }})
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        combo:
          - tab: board
            weekday: mon
    env:
      SCHEME: SynapseTasks
      PROJECT: SynapseTasks.xcodeproj
      DERIVED_DATA: build/ci-derived
      TASKS_SCREENSHOT_TAB: ${{ matrix.combo.tab }}
      TASKS_SELECTED_WEEKDAY: ${{ matrix.combo.weekday }}
      SCREENSHOT_OUTPUT: artifacts/ui/${{ matrix.combo.tab }}_${{ matrix.combo.weekday }}.png

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode
        run: |
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
          xcodebuild -version
          xcodebuild -showsdks

      - name: Install tooling
        run: |
          sudo gem install xcpretty --no-document

      - name: Build (Debug)
        run: |
          set -euo pipefail
          mkdir -p "$DERIVED_DATA"
          xcodebuild \
            -project "$PROJECT" \
            -scheme "$SCHEME" \
            -configuration Debug \
            -sdk iphonesimulator \
            -destination 'generic/platform=iOS Simulator' \
            -derivedDataPath "$DERIVED_DATA" \
            build | xcpretty

      - name: Resolve artifacts
        run: |
          set -euo pipefail
          APP_PATH=$(find "$DERIVED_DATA/Build/Products" -type d -name "*.app" -print -quit)
          if [ -z "$APP_PATH" ]; then
            echo "App not found" >&2
            find "$DERIVED_DATA" -maxdepth 4 -type d -name "*.app"
            exit 1
          fi
          echo "APP_PATH=$APP_PATH" >> "$GITHUB_ENV"
          BUNDLE_ID=$(xcodebuild -showBuildSettings -project "$PROJECT" -scheme "$SCHEME" -configuration Debug -sdk iphonesimulator | awk -F ' = ' '/PRODUCT_BUNDLE_IDENTIFIER/ {print $2; exit}')
          if [ -z "$BUNDLE_ID" ]; then
            echo "Unable to resolve bundle identifier" >&2
            exit 1
          fi
          echo "BUNDLE_ID=$BUNDLE_ID" >> "$GITHUB_ENV"

      - name: Create simulator
        run: |
          set -euo pipefail
          RUNTIME=$(xcrun simctl list runtimes --json | python3 - <<'PY'
import json, sys
runtimes = json.load(sys.stdin).get("runtimes", [])
preferred = None
fallback = None
for rt in runtimes:
    if not rt.get("isAvailable", False):
        continue
    identifier = rt.get("identifier", "")
    if identifier.startswith("com.apple.CoreSimulator.SimRuntime.iOS-18") and preferred is None:
        preferred = identifier
    if identifier.startswith("com.apple.CoreSimulator.SimRuntime.iOS") and fallback is None:
        fallback = identifier
print(preferred or fallback or "", end="")
PY
)
          if [ -z "$RUNTIME" ]; then
            echo "Simulator runtime not found" >&2
            exit 1
          fi
          DEVTYPE=$(xcrun simctl list devicetypes --json | python3 - <<'PY'
import json, sys
for dt in json.load(sys.stdin).get("devicetypes", [])[::-1]:
    name = dt.get("name", "")
    if "iPhone 15" in name:
        print(dt.get("identifier", ""), end="")
        break
PY
)
          if [ -z "$DEVTYPE" ]; then
            echo "Simulator device type not found" >&2
            exit 1
          fi
          UDID=$(xcrun simctl create "ci-${{ github.run_id }}-$RANDOM" "$DEVTYPE" "$RUNTIME")
          echo "RUNTIME=$RUNTIME" >> "$GITHUB_ENV"
          echo "DEVTYPE=$DEVTYPE" >> "$GITHUB_ENV"
          echo "UDID=$UDID" >> "$GITHUB_ENV"
          echo "Created simulator: $UDID"

      - name: Capture screenshot
        env:
          APP_PATH: ${{ env.APP_PATH }}
          BUNDLE_ID: ${{ env.BUNDLE_ID }}
          UDID: ${{ env.UDID }}
        run: |
          set -euo pipefail
          chmod +x scripts/ui_capture.sh
          echo "[info] Target screenshot: $SCREENSHOT_OUTPUT"
          scripts/ui_capture.sh \
            --scheme "$SCHEME" \
            --project "$PROJECT" \
            --derived-data "$DERIVED_DATA" \
            --udid "$UDID" \
            --bundle-id "$BUNDLE_ID" \
            --app-path "$APP_PATH" \
            --screenshot "$SCREENSHOT_OUTPUT"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ui-${{ matrix.combo.tab }}-${{ matrix.combo.weekday }}
          path: artifacts/ui/

      - name: Cleanup simulator
        if: always()
        env:
          UDID: ${{ env.UDID }}
        run: |
          if [ -n "${UDID:-}" ]; then
            xcrun simctl shutdown "$UDID" 2>/dev/null || true
            xcrun simctl delete "$UDID" 2>/dev/null || true
          fi

      - name: Dump diagnostics (on failure)
        if: failure()
        run: |
          xcrun simctl list
          xcodebuild -project "$PROJECT" -scheme "$SCHEME" -showBuildSettings | head -200
