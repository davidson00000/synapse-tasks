name: iOS UI Capture

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  ui-shot:
    runs-on: macos-14
    timeout-minutes: 35
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode (16.2 if present, otherwise default)
        shell: bash
        run: |
          set -euxo pipefail
          if [ -d "/Applications/Xcode_16.2.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.2.app
          else
            sudo xcode-select -s /Applications/Xcode.app
          fi
          xcodebuild -version

      # シミュレータの状態が怪しい時に安定させる
      - name: Reset simulators (one-time hygiene)
        shell: bash
        run: |
          set -euxo pipefail
          xcrun simctl shutdown all || true
          xcrun simctl erase all || true

      # ======== ビルド with ログ採取 ========
      - name: Build (Debug) with full logs
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p build-logs
          xcodebuild \
            -scheme "SynapseTasks" \
            -configuration Debug \
            -destination 'platform=iOS Simulator,name=iPhone 15' \
            -derivedDataPath build \
            build \
          | tee build-logs/xcodebuild.log

          # 重要行を抽出（Swiftのerror, warning類や致命ログ）
          sed -n '1,200p' build-logs/xcodebuild.log > build-logs/xcodebuild.head.log || true
          grep -n -E "error:|fatal error:|note:|warning:" build-logs/xcodebuild.log > build-logs/xcodebuild.errors.log || true

      - name: Upload build logs
        uses: actions/upload-artifact@v4
        with:
          name: xcodebuild-logs
          path: build-logs
          retention-days: 7

      # ======== UDID / APP / BUNDLE 検出 & インストール ========
      - name: Resolve UDID, APP, BUNDLE_ID and Install
        id: detect
        shell: bash
        run: |
          set -euxo pipefail

          # UDID 検出 & Boot
          UDID="$(xcrun simctl list devices | awk -F '[()]' '/iPhone 15 .*Booted|iPhone 15 .*Shutdown/ {print $2; exit}')"
          if [ -z "${UDID}" ]; then
            # 無ければ作成（最新のiOSランタイムを推測）
            RUNTIME=$(xcrun simctl list runtimes | awk -F '[()]' '/iOS .* \(.*\)/ {print $2}' | tail -n1)
            DEVTYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-15"
            xcrun simctl create "CI iPhone 15" "${DEVTYPE}" "${RUNTIME}" > /dev/null
            UDID="$(xcrun simctl list devices | awk -F '[()]' '/CI iPhone 15/ {print $2; exit}')"
          fi
          xcrun simctl boot "${UDID}" || true

          # APP パス
          APP_PATH="$(find build/Build/Products/Debug-iphonesimulator -maxdepth 1 -name '*.app' | head -n1)"
          echo "APP_PATH=${APP_PATH}"
          if [ -z "${APP_PATH}" ]; then
            echo "No .app found under derived data." >&2
            exit 1
          fi

          # BUNDLE ID
          BUNDLE_ID="$(xcodebuild -showBuildSettings -scheme "SynapseTasks" -configuration Debug | awk -F' = ' '/PRODUCT_BUNDLE_IDENTIFIER/ {print $2; exit}')"
          echo "BUNDLE_ID=${BUNDLE_ID}"

          # Install
          xcrun simctl install "${UDID}" "${APP_PATH}"

          # Export to outputs
          {
            echo "udid=${UDID}"
            echo "bundle_id=${BUNDLE_ID}"
            echo "app_path=${APP_PATH}"
          } >> "$GITHUB_OUTPUT"

      # ======== 起動 (ENV付与) → スクショ ========
      - name: Launch with ENV and Screenshot (script)
        env:
          TASKS_SCREENSHOT_TAB: board
          TASKS_SELECTED_WEEKDAY: mon
        shell: bash
        run: |
          set -euxo pipefail
          chmod +x scripts/ui_capture.sh
          mkdir -p artifacts/ui

          scripts/ui_capture.sh \
            --scheme "SynapseTasks" \
            --derived-data "build" \
            --udid "${{ steps.detect.outputs.udid }}" \
            --bundle-id "${{ steps.detect.outputs.bundle_id }}" \
            --app-path "${{ steps.detect.outputs.app_path }}" \
            --screenshot "artifacts/ui/board_mon.png"

      - name: Upload UI Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ui-screens
          path: artifacts/ui
          retention-days: 7

      # ======== 失敗時にもログを必ず残す ========
      - name: Always upload logs (post)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: post-run-logs
          path: |
            ~/Library/Logs/CoreSimulator
            build-logs
          retention-days: 7

