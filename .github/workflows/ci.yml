name: iOS UI Capture

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  ui-shot:
    runs-on: macos-14
    timeout-minutes: 40
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode (prefer 16.2)
        shell: bash
        run: |
          set -euxo pipefail
          if [ -d "/Applications/Xcode_16.2.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.2.app
          else
            sudo xcode-select -s /Applications/Xcode.app
          fi
          xcodebuild -version

      # シミュレータの汚れを落としてから開始
      - name: Reset Simulators (hygiene)
        shell: bash
        run: |
          set -euxo pipefail
          xcrun simctl shutdown all || true
          xcrun simctl erase all || true

      # デバイスを堅牢に検出/作成（iPhone 15 が無ければ iPhone SE 3rd で作成）
      - name: Detect/Create Simulator (return UDID)
        id: dev
        shell: bash
        run: |
          set -euxo pipefail
          # 既存デバイスから iPhone 系の UDID を優先的に取得
          UDID="$(xcrun simctl list devices available | awk -F '[()]' '/iPhone/ {print $2; exit}')"
          if [ -z "${UDID}" ]; then
            # ランタイムを推測
            RUNTIME="$(xcrun simctl list runtimes | awk -F '[()]' '/iOS .* \\(/ {print $2}' | tail -n1)"
            # まず iPhone 15 を試行、無ければ iPhone SE(3rd)
            if xcrun simctl list devicetypes | grep -q "iPhone 15"; then
              DEVTYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-15"
            else
              DEVTYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-SE-3rd-generation"
            fi
            xcrun simctl create "CI Device" "${DEVTYPE}" "${RUNTIME}" >/dev/null
            UDID="$(xcrun simctl list devices | awk -F '[()]' '/CI Device/ {print $2; exit}')"
          fi
          echo "udid=${UDID}" >> "$GITHUB_OUTPUT"
          # Boot しておく
          xcrun simctl boot "${UDID}" || true

      # （バンドエイド）旧パス参照対策：新UIファイルを旧パスへ複製
      - name: Sync legacy path for TaskListView (temporary)
        shell: bash
        run: |
          set -euxo pipefail
          if [ -f "Features/ListUI/TaskListView.swift" ]; then
            mkdir -p SynapseTasks/Views
            cp -f Features/ListUI/TaskListView.swift SynapseTasks/Views/TaskListView.swift
          fi

      # ビルド：UDID 固定 + ログ採取 + AssetSymbols 無効化（Exit65回避の暫定）
      - name: Build (Debug) with logs (id-based destination)
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p build-logs
          xcodebuild \
            -scheme "SynapseTasks" \
            -configuration Debug \
            -destination "id=${{ steps.dev.outputs.udid }}" \
            -derivedDataPath build \
            COMPILER_INDEX_STORE_ENABLE=NO \
            ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS=NO \
            ONLY_ACTIVE_ARCH=YES \
            build \
          | tee build-logs/xcodebuild.log
          # 重要行抽出
          sed -n '1,200p' build-logs/xcodebuild.log > build-logs/xcodebuild.head.log || true
          grep -n -E "error:|fatal error:|note:|warning:" build-logs/xcodebuild.log > build-logs/xcodebuild.errors.log || true

      - name: Upload build logs
        uses: actions/upload-artifact@v4
        with:
          name: xcodebuild-logs
          path: build-logs
          retention-days: 7

      # .app と Bundle ID を確定
      - name: Resolve APP & BUNDLE_ID
        id: detect
        shell: bash
        run: |
          set -euxo pipefail
          APP_PATH="$(find build/Build/Products/Debug-iphonesimulator -maxdepth 1 -name '*.app' | head -n1)"
          if [ -z "${APP_PATH}" ]; then
            echo "No .app found under derived data." >&2
            exit 65
          fi
          BID="$(xcodebuild -showBuildSettings -scheme "SynapseTasks" -configuration Debug | awk -F ' = ' '/PRODUCT_BUNDLE_IDENTIFIER/ {print $2; exit}')"
          echo "app_path=${APP_PATH}"   >> "$GITHUB_OUTPUT"
          echo "bundle_id=${BID}"       >> "$GITHUB_OUTPUT"

      # 起動→撮影（引数無しでOK：スクリプトが自動補完）
      - name: Launch with ENV and Screenshot
        env:
          TASKS_SCREENSHOT_TAB: board
          TASKS_SELECTED_WEEKDAY: mon
          UDID: ${{ steps.dev.outputs.udid }}
          BUNDLE_ID: ${{ steps.detect.outputs.bundle_id }}
          APP_PATH: ${{ steps.detect.outputs.app_path }}
        shell: bash
        run: |
          set -euxo pipefail
          chmod +x scripts/ui_capture.sh
          # 環境変数だけ渡して裸呼び出し（引数不足エラーは出ない実装にしてある）
          scripts/ui_capture.sh

      - name: Upload UI Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ui-screens
          path: artifacts/ui
          retention-days: 7

      - name: Always upload simulator logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: simulator-logs
          path: |
            ~/Library/Logs/CoreSimulator
            ~/Library/Developer/CoreSimulator/Devices
          retention-days: 7

